/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/slok/role-operator/pkg/apis/roleoperator/v1alpha1"
	scheme "github.com/slok/role-operator/pkg/client/k8s/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MultiRoleBindingsGetter has a method to return a MultiRoleBindingInterface.
// A group's client should implement this interface.
type MultiRoleBindingsGetter interface {
	MultiRoleBindings(namespace string) MultiRoleBindingInterface
}

// MultiRoleBindingInterface has methods to work with MultiRoleBinding resources.
type MultiRoleBindingInterface interface {
	Create(*v1alpha1.MultiRoleBinding) (*v1alpha1.MultiRoleBinding, error)
	Update(*v1alpha1.MultiRoleBinding) (*v1alpha1.MultiRoleBinding, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.MultiRoleBinding, error)
	List(opts v1.ListOptions) (*v1alpha1.MultiRoleBindingList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MultiRoleBinding, err error)
	MultiRoleBindingExpansion
}

// multiRoleBindings implements MultiRoleBindingInterface
type multiRoleBindings struct {
	client rest.Interface
	ns     string
}

// newMultiRoleBindings returns a MultiRoleBindings
func newMultiRoleBindings(c *RoleoperatorV1alpha1Client, namespace string) *multiRoleBindings {
	return &multiRoleBindings{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the multiRoleBinding, and returns the corresponding multiRoleBinding object, and an error if there is any.
func (c *multiRoleBindings) Get(name string, options v1.GetOptions) (result *v1alpha1.MultiRoleBinding, err error) {
	result = &v1alpha1.MultiRoleBinding{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("multirolebindings").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MultiRoleBindings that match those selectors.
func (c *multiRoleBindings) List(opts v1.ListOptions) (result *v1alpha1.MultiRoleBindingList, err error) {
	result = &v1alpha1.MultiRoleBindingList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("multirolebindings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested multiRoleBindings.
func (c *multiRoleBindings) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("multirolebindings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a multiRoleBinding and creates it.  Returns the server's representation of the multiRoleBinding, and an error, if there is any.
func (c *multiRoleBindings) Create(multiRoleBinding *v1alpha1.MultiRoleBinding) (result *v1alpha1.MultiRoleBinding, err error) {
	result = &v1alpha1.MultiRoleBinding{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("multirolebindings").
		Body(multiRoleBinding).
		Do().
		Into(result)
	return
}

// Update takes the representation of a multiRoleBinding and updates it. Returns the server's representation of the multiRoleBinding, and an error, if there is any.
func (c *multiRoleBindings) Update(multiRoleBinding *v1alpha1.MultiRoleBinding) (result *v1alpha1.MultiRoleBinding, err error) {
	result = &v1alpha1.MultiRoleBinding{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("multirolebindings").
		Name(multiRoleBinding.Name).
		Body(multiRoleBinding).
		Do().
		Into(result)
	return
}

// Delete takes name of the multiRoleBinding and deletes it. Returns an error if one occurs.
func (c *multiRoleBindings) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("multirolebindings").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *multiRoleBindings) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("multirolebindings").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched multiRoleBinding.
func (c *multiRoleBindings) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MultiRoleBinding, err error) {
	result = &v1alpha1.MultiRoleBinding{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("multirolebindings").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
